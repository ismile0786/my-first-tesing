Project Setup :

path: /root/testproject/mysite
 Starting development server at http://127.0.0.1:8000/
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Terraform Setup:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
step: 1 

Need to create Folder called "terraform" for the project

Step: 2 
Creat the file called " devopstest.tf" and add the below details on this file.

provider "aws" {
  region = us-west-1
}

Step: 3

Provide AWS credentials in order to authenticate:

$ export AWS_ACCESS_KEY_ID="AWS_ACCESS_KEY_ID"
$ export AWS_SECRET_ACCESS_KEY="AWS_SECRET_ACCESS_KEY"

######>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>####
###"Below are AWS resources need to configure by Terraform"
####>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>> Networking:
VPC
Public and private subnets
Routing tables
Internet Gateway
Key Pairs

Security Groups
Load Balancers, Listeners, and Target Groups
IAM Roles and Policies

Launch Config and Auto Scaling Group
Health Checks and Logs
>
=================================================================================

vi devopstest.ty

# Production VPC
resource "aws_vpc" "production-vpc" {
  cidr_block           = " "
  enable_dns_support   = true
  enable_dns_hostnames = true
}

# Public subnets
resource "aws_subnet" "public-subnet-1" {
  cidr_block        =  
  vpc_id            =  
  availability_zone =  
}
resource "aws_subnet" "public-subnet-2" {
  cidr_block        = 
  vpc_id            = 
  availability_zone = 
}

# Private subnets
resource "aws_subnet" "private-subnet-1" {
  cidr_block        = 
  vpc_id            = 
  availability_zone = 
}
resource "aws_subnet" "private-subnet-2" {
  cidr_block        = 
  vpc_id            = 
  availability_zone = 
}

# Route tables for the subnets
resource "aws_route_table" "public-route-table" {
  vpc_id = 
}
resource "aws_route_table" "private-route-table" {
  vpc_id = 
}

# Associate the newly created route tables to the subnets
resource "aws_route_table_association" "public-route-1-association" {
  route_table_id = aws_route_table.public-route-table.id
  subnet_id      = aws_subnet.public-subnet-1.id
}
resource "aws_route_table_association" "public-route-2-association" {
  route_table_id = aws_route_table.public-route-table.id
  subnet_id      = aws_subnet.public-subnet-2.id
}
resource "aws_route_table_association" "private-route-1-association" {
  route_table_id = aws_route_table.private-route-table.id
  subnet_id      = aws_subnet.private-subnet-1.id
}
resource "aws_route_table_association" "private-route-2-association" {
  route_table_id = aws_route_table.private-route-table.id
  subnet_id      = aws_subnet.private-subnet-2.id
}

# Elastic IP
resource "aws_eip" "elastic-ip-for-nat-gw" {
  vpc                       = true
  associate_with_private_ip = " "
}

# NAT gateway
resource "aws_nat_gateway" "nat-gw" {
  allocation_id = 
  subnet_id     = 
  depends_on    = 
}
resource "aws_route" "nat-gw-route" {
  route_table_id         = aws_route_table.private-route-table.id
  nat_gateway_id         = aws_nat_gateway.nat-gw.id
  destination_cidr_block = "0.0.0.0/0"
}

# Internet Gateway for the public subnet
resource "aws_internet_gateway" "production-igw" {
  vpc_id = 
}

# Route the public subnet traffic through the Internet Gateway
resource "aws_route" "public-internet-igw-route" {
  route_table_id         = aws_route_table.public-route-table.id
  gateway_id             = aws_internet_gateway.production-igw.id
  destination_cidr_block = "0.0.0.0/0"
}

######>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>###


###### Application Load Balancer (ALB) along with the appropriate Target Group and Listener #### 

#####>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>####


# Production Load Balancer
resource "aws_lb" "production" {
  name               = "My ALB"
  load_balancer_type = "application"
  internal           = false
  security_groups    = 
  subnets            = [aws_subnet.public-subnet-1.id, aws_subnet.public-subnet-2.id]
}

# Target group
resource "aws_alb_target_group" "default-target-group" {
  name     = "My ALB-tg"
  port     = 443
  protocol = "HTTPS"
  vpc_id   = aws_vpc.production-vpc.id

  health_check {
    path                = <health_check_path>
    port                = "traffic-port"
    healthy_threshold   = 5
    unhealthy_threshold = 2
    timeout             = 2
    interval            = 5
    matcher             = "200"
  }
}

# Listener (redirects traffic from the load balancer to the target group)
resource "aws_alb_listener" {
  load_balancer_arn = aws_lb.production.id
  port              = "443"
  protocol          = "HTTPS"
  depends_on        = [aws_alb_target_group.default-target-group]

  default_action {
    type             = "forward"
    target_group_arn = aws_alb_target_group.default-target-group.arn
  }
}

########>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#####

## IAM Roles

resource "aws_iam_role" "ecs-host-role" {
  name               = "ecs_host_role_prod"
  assume_role_policy = file("policies/ecs-role.json")
}

resource "aws_iam_role_policy" "ecs-instance-role-policy" {
  name   = "ecs_instance_role_policy"
  policy = file("policies/ecs-instance-role-policy.json")
  role   = aws_iam_role.ecs-host-role.id
}

resource "aws_iam_role" "ecs-service-role" {
  name               = "ecs_service_role_prod"
  assume_role_policy = file("policies/ecs-role.json")
}

resource "aws_iam_role_policy" "ecs-service-role-policy" {
  name   = "ecs_service_role_policy"
  policy = file("policies/ecs-service-role-policy.json")
  role   = aws_iam_role.ecs-service-role.id
}

resource "aws_iam_instance_profile" "ecs" {
  name = "ecs_instance_profile_prod"
  path = "/"
  role = aws_iam_role.ecs-host-role.name
}


### Auto Scaling

resource "aws_autoscaling_group" "ecs-cluster" {
  name                 = "Mytest_auto_scaling_group"
  min_size             = 
  max_size             = 
  desired_capacity     = 
  health_check_type    = "EC2"
  launch_configuration = aws_launch_configuration.name
  vpc_zone_identifier  = [aws_subnet.public-subnet-1.id, aws_subnet.public-subnet-2.id]
}

##### need to Postress configure with RDS

# RDS Security Group (traffic ECS -> RDS)
resource "aws_security_group" "rds" {
  name        = "rds-security-group"
  description = "Allows inbound access from ECS only"
  vpc_id      = aws_vpc.production-vpc.id

  ingress {
    protocol        = "tcp"
    from_port       = ""
    to_port         = ""
    security_groups = [aws_security_group.ecs.id]
  }

  egress {
    protocol    = "-1"
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
}

